name: Deploy application

# run workflow on every push
on:
  push:

jobs:
  deploy:
    # run workflow on ubuntu with permissions
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3

      # setup latest node version
      - uses: actions/setup-node@v1
        with:
          node-version: "20"


      # We need to configure AWS creds using aws actions to deploy code on AWS EC2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/<role-name>
          aws-region: ${{ secrets.AWS_REGION }}


      # AWS ECR action for login, will automatically
      # login using AWS credentials to push docker image
      - name: Login to Amazon ECR
        # id for ECR. You can add anything as id
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1


      - name: Build, tag, and push image to Amazon ECR
        env:
          # registry url, will take it automatically from login output
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: deal
          IMAGE_TAG: image-tag-name
        run: |
          # build image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .         
          # push docker image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


      - name: Deploy
        env:
          # add ssh-private-key to env variable
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # Copy ssh private key to the file with permissions
          echo "$SSH_PRIVATE_KEY" > ssh_private_key && chmod 600 ssh_private_key
          
          # Create application folder on ec2 and copy nginx directory into it
          scp -i ssh_private_key -r nginx ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_ADDRESS }}:application

          # Copy deploy.sh file in the application folder inside the EC2 instance,
          cat deploy.sh | ssh -i ssh_private_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_ADDRESS }} 'cat > ./application/deploy.sh'
          
          # Copy docker-compose to EC2, configure envrinment variabes and run deploy.sh
          cat docker-compose.yaml | ssh -i ssh_private_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_ADDRESS }} sudo PUBLISH_PORT=${{secrets.PUBLISH_PORT}} 'bash -c "cd application && cat > docker-compose.yaml && chmod -R 755 ./deploy.sh && ./deploy.sh && cd .. && rm -rf application"'
